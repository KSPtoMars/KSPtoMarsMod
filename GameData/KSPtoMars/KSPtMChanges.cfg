//This is the .cfg for all MM changes to existing parts for KSP to Mars.
//Contributors:  Charlie_Zulu, [add your name here]

@PART[Engineer*]:FOR[KSPtM]
//Removal of all Kerbal Engineer Redux parts from the part list and tech tree
{
	%category = -1
	%TechRequired = hidden
}
@PART[mumech*]:FOR[KSPtM]
//Removal of all MechJeb parts from the part list and tech tree
{
	%category = -1
	%TechRequired = hidden
}
@PART[*]:HAS[@MODULE[ModuleCommand]]:NEEDS[MechJeb]:Final
//Addition of MechJeb to all command parts, if MechJeb is installed
{
	MODULE
    {
        name = MechJebCore
        MechJebLocalSettings {
            MechJebModuleCustomWindowEditor { unlockTechs = flightControl }
            MechJebModuleSmartASS { unlockTechs = flightControl }
            MechJebModuleManeuverPlanner { unlockTechs = advFlightControl }
            MechJebModuleNodeEditor { unlockTechs = advFlightControl }
            MechJebModuleTranslatron { unlockTechs = advFlightControl }
            MechJebModuleWarpHelper { unlockTechs = advFlightControl }
            MechJebModuleAttitudeAdjustment { unlockTechs = advFlightControl }
            MechJebModuleThrustWindow { unlockTechs = advFlightControl }
            MechJebModuleRCSBalancerWindow { unlockTechs = advFlightControl }
            MechJebModuleRoverWindow { unlockTechs = fieldScience }
            MechJebModuleAscentGuidance { unlockTechs = unmannedTech }
            MechJebModuleLandingGuidance { unlockTechs = unmannedTech }
            MechJebModuleSpaceplaneGuidance { unlockTechs = unmannedTech }
            MechJebModuleDockingGuidance { unlockTechs = advUnmanned }
            MechJebModuleRendezvousAutopilotWindow { unlockTechs = advUnmanned }
            MechJebModuleRendezvousGuidance { unlockTechs = advUnmanned }
        }
    }
}
@PART[*]:HAS[@MODULE[ModuleCommand]]:NEEDS[kOS]:FOR[KSPtM]
//Addition of kOSProcessor to all command parts.  Interim solution until we write part-specific patches
{
	MODULE
	{
		name = kOSProcessor
		diskSpace = 10000000
	}
}
@PART[*]:HAS[@MODULE[ModuleRTAntenna]]:NEEDS[Telemachus]:Final
//Addition of Telemachus to all antennas, if Telemachus is installed
{
        MODULE
    {
        name = TelemachusDataLink
    }
}
@PART[TaurusHCV]:FOR[KSPTM]:AFTER[RealismOverhaul]
{
	//Fix retrorocket/LES rocket behaviour.
	MODULE
	{
		name = ModuleAnimateGeneric
		animationName = LESDeploy
		allowManualControl = no
	}
}

@PART[*]:FINAL
{
	//Add part name to description for easier identification.
	@description = #$description$ $/name$
}

RESOURCE_DEFINITION
{
	//Add Pu-238 for JDiminishingRTG
    name        = Plutonium238
    density     = 0.002668627 //Doesn't really matter, since the MHW-RTG only uses 1 fuel type...  Units are t/u (t/L)
    unitcost    = 80 //This doesn't really matter all that much, although this is quite a low guess.
    flowmode    = NO_FLOW
    transfer    = NONE
    isTweakable = true
}

RTGFUELCONFIG 
{
	//Add Pu-238 for JDiminishingRTG
    name     = Plutonium238 // MUST have matching name in RESOURCE_DEFINITION
    halflife = 301.84         // in kerbal years (earth*3.43)
    pep      = 5.333333333 // Power density of the material (Watts/kilogram).  Calculated to give 157 W at mission start, and decreased by a factor of 10^-3, since it was performing incorrectly, likely due to using W instead of kW.  Oddly enough, uses kg instead of t.
}

@PART[rtg]:FOR[KSPtM]:AFTER[JDiminishingRTG]
{
	//JDiminishingRTG support for MHW-RTG
	@mass = 0.0332 //37.7kg-4.5kg
    !MODULE[ModuleGenerator] {}
	@MODULE[ModuleDiminishingRTG]
    {
        @efficiency = 0.065416667 // factor (0..1) of 'pep' into ElectricCharge 
        @volume = 1.68626061   // roughly, in deciliters. ("units").  Units are actually L, which has been corrected for ~C_Z
		
    }
}

@PART[rtg]:FINAL
{
	//Additional JDiminishingRTG support for MHW-RTG, changing mass to account for addition of 4.5kg of Pu-238
	@mass = 0.0332 //37.7kg-4.5kg
}

@PART[TaurusHCV]:FOR[KSPTM]:AFTER[RealismOverhaul]
{	
	//Add CoMShifter for Re-entry.  I'd personally rather do this with fuel tanks and actual ballast, but we can work on that later.  
	+MODULE
	{
		+name = CoMShifter
		+DescentModeCoM = 0.0, 0.0, -0.2
	}
}

@PART[mk2CargoBayS]:FOR[KSPTM]
{
	//Sample addition of Tweakscale support.
	MODULE
	{
		name = TweakScale
		type = free
		defaultScale = 100
	}
}

@PART[liquidEngineMiniRescale]:AFTER[RealismOverhaul]
{
	//Fix model
	%MODEL
	{
		%model = AIES_Aerospace/Engine/AIESenginegalaxvr2/model
		%scale = 3.2426875, 3.2426875, 3.2426875
	}
	@scale = 3.2426875
	%node_stack_top = 0.0, 0.15, 0.0, 0.0, 1.0, 0.0, 1
	%node_stack_bottom = 0.0, -0.48, 0.0, 0.0, -1.0, 0.0, 1
	!node_attach = DELETE
	//Add pedantry
	@title = Aestus II / RS-72 [1.5m]
	%manufacturer = EADS Astrium
	@description = Small MMH/NTO upper stage rocket engine, designed as a collaboration between Pratt & Whitney Rocketdyne and Airbus DS, Ottobrunn.  Based off of the design of the Ariane 5's Aestus upper stage engine, with the addition of a turbopump and power plant developed by PWR.
	//Fix ignition count
	@MODULE[ModuleEngines*]
	{
		@ignitions = 20 //Based on data from http://cs.astrium.eads.net/sp/launcher-propulsion/rocket-engines/aestus-rs72-rocket-engine.html
	}
}

@PART[inflato1]:FOR[KSPTM]:AFTER[RealismOverhaul]
{
	//Changing oxygen = 1895036, food = 20838
	@MODULE[ModuleFuelTanks]
	{
		@TANK[Food]
		{
			@amount = 20838
			@maxAmount = 20838
		}
		@TANK[Oxygen]
		{
			@amount = 1895036
			@maxAmount = 1895036
		}
	}

}

@PART[crewCabin]:AFTER[RealismOverhaul]
{
	//Changing oxygen = 710639, food = 7815, water = 4800.
	@MODULE[ModuleFuelTanks]
	{
		@TANK[Food]
		{
			@amount = 7815
			@maxAmount = 7815
		}
		@TANK[Oxygen]
		{
			@amount = 710639
			@maxAmount = 710639
		}
		@TANK[Water]
		{
			@amount = 4800
			@maxAmount = 4800
		}
	}

}

+PART[NP_FreyjaCapsule]:FINAL
{
	//Make changes to Freyja Capsule for use in the MAV
	@name = KSPtM_Freyja4ManCapsule
	@mass = 4.25
	@title = KSPtM MAV Crew Capsule
	@node_stack_top = 0.0, 1.49, 0.0, 0.0, 1.0, 0.0, 2 //+[0, 0.4, 0, 0, 0, 0, 0]
	@node_stack_bottom = 0.0, -0.202, 0.0, 0.0, -1.0, 0.0, 6 //+[0, 0.4, 0, 0, 0, 0, 0]
	@maxtemp = 1300
	@CrewCapacity = 4
	
}

+PART[rtg]:FINAL
{
	@name = TestGPHS_RTG
	@title = GPHS RTG 
	//JDiminishingRTG support for MHW-RTG
	@mass = 0.04875 //37.7kg-4.5kg
    !MODULE[ModuleGenerator] {}
	@MODULE[ModuleDiminishingRTG]
    {
        @efficiency = 0.068181818  // factor (0..1) of 'pep' into ElectricCharge 
        @volume = 3.091477785   // roughly, in deciliters. ("units").  Units are actually L, which has been corrected for ~C_Z
		
    }
}

+PART[microEngineex1sat]
{
	//Add a waste vent port.  Values are... approximate.
	@name = KSPTMventPort

	@TechRequired = specializedElectrics
	@entryCost = 38200
	@cost = 3300
	@category = Utility
	@subcategory = 0
	@title = TAC Waste Vent Port
	@description = This is a small purge vent that when opened can release waste and wastewater, preventing it from building up in your tanks.  It consumes a small amount of charge to operate the pump.
	@attachRules = 1,1,1,0,0

	@mass = 0.008
	
	!MODULE[ModuleEngines*]
	{
	}
	!MODULE[ModuleGimbal*]
	{
	}
	!MODULE[ModuleJettison*]
	{
	}
	!MODULE[ModuleAnimateHeat*]
	{
	}
	MODULE
	{
		name = TacGenericConverter
		converterName = Waste Venting
		conversionRate = 0.2
		inputResources = Waste, 1, ElectricCharge, 0.1
	}
	MODULE
	{
		name = TacGenericConverter
		converterName = Waste Water Venting
		conversionRate = 0.2
		inputResources = WasteWater, 3, ElectricCharge, 0.1
	}
}

+PART[TacWaterPurifierLarge]:FINAL
{
	//Adding ODT's WRS
	%RSSROConfig = True
	!MODULE[Tweakscale]
	{
	}
	@name = KSPtMorbiterWRS
	@title = KSPtM Orbiter WRS
	@description = KSPtM ODT WRS.  
	@mass = 8
	@scale = 1.722222
	@MODULE[TacGenericConverter]
	{
		@conversionRate = 1.0	// Already set at 4 people
		@inputResources = WasteWater, 0.000222498618, ElectricCharge, 0.743
		@outputResources = Water, 0.0001967777778, false, Waste, 0.00003577777777, true
	}
	!RESOURCE[*]
	{
	}
}
+PART[TacCarbonExtractor]:FINAL
{
	//Adding ODT's CDRA
	%RSSROConfig = True
	!MODULE[Tweakscale]
	{
	}
	@name = KSPtMorbiterCDRA
	@mass = 0.6
	@description = KSPtM ODT CDRA.  Uses a 4-bed molecular sieve.  
	@MODULE[TacGenericConverter]
	{
		@conversionRate = 1.0	// Already set at 4 people
		@inputResources = CarbonDioxide, 0.02368060623, ElectricCharge, 0.42
		@outputResources = Waste, 0.00001540028759, true
	}
	!RESOURCE[*]
	{
	}
}

+PART[ObConicalHeatShield2]:FOR[KSPtM]
{
	%RSSROConfig = True
    @name = KSPtM_MAV_heatshield
    @rescaleFactor = 4.56
    @node_stack_bottom = 0.0, -0.310, 0.0, 0.0, -1.0, 0.0, 3
    @node_stack_top = 0.0, 0.260, 0.0, 0.0, 1.0, 0.0, 3
    @cost = 900
    @TechRequired = advLanding
    @entryCost = 1800
    @title = KSP to Mars MAV Heat Shield
    @mass = 1.0
    @bulkheadProfiles = size3
	!MODULE[ModuleJettison] {}
    @MODULE[ModuleDecouple]
    {
        @ejectionForce = 300
    }
	!MODULE[ModuleAblator] {}
	!MODULE[ModuleHeatShield] {}
	!MODULE[ModuleAeroReentry] {}
	!RESOURCE[AblativeShielding] {}
	!RESOURCE[Ablator] {}
	@emissiveConst = 0.6 // not too absorptive for reentry
	%thermalMassModifier = 1.0
	MODULE
	{
		name = ModuleAblator
		ablativeResource = Ablator
		lossExp = -6000
		lossConst = 0.007
		pyrolysisLossFactor = 6000
		ablationTempThresh = 500
		reentryConductivity = 0.01
		//reentryConductivity = 0.12
		//@reentryConductivity = #$../heatConductivity$ // if it exists, use it
	}
	@MODULE[ModuleAblator]:NEEDS[DeadlyReentry]
	{
		@name = ModuleHeatShield
		@pyrolysisLossFactor = 60000
		skinThicknessFactor = 0.2 // should be higher for this part, is heatshield
		skinHeatConductivity = 0.00045
		skinMaxTemp = 2200 // lunar rated
	}
	RESOURCE
	{
		name = Ablator
		amount = 760
		maxAmount = 760
	}
}

+PART[ms1RCSTank]:FOR[KSPtM]
{
	//Adding the MAV ascent fuel tanks
	%RSSROConfig = True
	@name = KSPtMascentTankMAV
	@title = KSPtM MAV Ascent Fuel Tank
	@description = KSPtM MAV Ascent Fuel Tank. 
	@mass = 0.072
	+rescaleFactor = 4.8
	!RESOURCE[*]
	{
	}
	MODULE
	{
		name = ModuleFuelTanks
		volume = 1250
		basemass = -1
		type = ServiceModule
		
	}
}
+PART[Antennacomtec1]:FOR[KSPtM]
{
	//Adding the MAV directional Antenna
	%RSSROConfig = True
	@name = KSPtMantennaDishMAV
	@title = KSPtM MAV High Gain Antenna
	@description = KSPtM MAV High Gain Antenna 
	@mass = 0.02
	MODULE[ModuleRTAntenna]
	{
		Mode0DishRange = 0
		Mode1DishRange = 30000000
		EnergyCost = 0.02
		MaxQ = 10000
		DishAngle = 40
		TRANSMITTER
		{
			PacketInterval = 0.5
			PacketSize = 0.2
			PacketResourceCost = 0.1
		}
	}
}

@PART[HG10B2]:LAST
{
	%RSSROConfig = True
	!MODULE[TweakScale]
	{
	}
	!mesh = DELETE
	MODEL
	{
		model = AerojetKerbodyne/Parts/Engine/HG10B2/HG10B2
		scale = 1.94975275, 2.0, 1.94975275
	}
	@rescaleFactor = 0.9
	@node_stack_top = 0.0, 0.50, 0, 0.0, 1.0, 0.0, 1
	@node_stack_top1 = 0.0, 1.48, 0, 0.0, 1.0, 0.0, 1
	@node_stack_bottom = 0.0, -3.2, 0.0, 0.0, -1.0, 0.0, 2
	@category = Propulsion
	@title = RL60 
	@manufacturer = Pratt & Whitney
	@description = Next generation cryogenic upper stage engine designed to replace the RL10, providing higher performance while maintaining the same installation envelope.  Also available in a lower 180kN thrust Vinci-180 model.
	@attachRules = 1,0,1,0,0
	%mass = 0.498
	%maxTemp = 1973.15
	%crashTolerance = 12
	%breakingForce = 250
	%breakingTorque = 250
	@MODULE[ModuleEngines*]
	{
		%maxThrust = 250
		%minThrust = 250
		%heatProduction = 100
		@atmosphereCurve
		{
			@key,0 = 0 465
			@key,1 = 1 230
		}
		@PROPELLANT[LiquidFuel]
		{
			@name = LqdHydrogen
			@ratio = 0.733
		}
		@PROPELLANT[Oxidizer]
		{
			@name = LqdOxygen
			@ratio = 0.267
		}
		%ullage = True
		%pressureFed = False
		%ignitions = 45
		!IGNITOR_RESOURCE,* {}
		IGNITOR_RESOURCE
		{
			name = ElectricCharge
			amount = 0.5
		}
	}
	MODULE
	{
		name = ModuleGimbal
		gimbalTransformName = thrustTransform
		gimbalRange = 6
		%useGimbalResponseSpeed = true
		%gimbalResponseSpeed = 16
	}
	!MODULE[ModuleAlternator]
	{
	}
	!RESOURCE[ElectricCharge]
	{
	}
	MODULE
	{
		name = ModuleEngineConfigs
		origMass = 0.159
		configuration = RL60
		modded = false
		CONFIG
		{
			name = RL60
			maxThrust = 250
			minThrust = 250
			heatProduction = 100
			PROPELLANT
			{
				name = LqdHydrogen
				ratio = 0.733
				DrawGauge = true
			}
			PROPELLANT
			{
				name = LqdOxygen
				ratio = 0.267
			}
			atmosphereCurve
			{
				key = 0 465
				key = 1 230
			}
		}
	}
}

@PART[RD171]:LAST
{
	%rescaleFactor = 0.92
	
}

//Add plumes to cluster for NovaPunch
@PART[NP_lfe_5m_AdvHL]:LAST
{
    PLUME
    {
        name = Hydrolox-Lower
        transformName = thrustTransform
        localRotation = 0,0,0
        localPosition = 0,0,-0.5
        plumePosition = 0,0,-0.3
        fixedScale = 2.5
        energy = 2
        speed = 1
    }
	@MODULE[ModuleEngines*]
	{
		@name = ModuleEnginesRF
	}
	@MODULE[ModuleEngineConfigs]
	{
		%type = ModuleEnginesRF
        @CONFIG,*
		{
			%powerEffectName = Hydrolox-Lower
		}
	}
}

@PART[LAStop375]:LAST
{
	%RSSROConfig = True
	!MODULE[TweakScale]
	{
	}
	!mesh = DELETE
	MODEL
	{
		model = AerojetKerbodyne/Parts/Utility/LAStop375/lastop
		scale = 1.358243, 1.358243, 1.358243
	}
	@rescaleFactor = 1.0
	@node_stack_bottom = 0.0, -0.767407295, 0.0, 0.0, -1.0, 0.0, 0
	@title = **TEST** Taurus HCV LAS Jettison Motor
	@description = The Launch Abort System jettison motor for the Taurus HCV with Kerbodyne AeroCap.
	@mass = 0.574
	@crashTolerance = 12
	@breakingForce = 250
	@breakingTorque = 250
	@maxTemp = 1973.15
	@MODULE[ModuleEngines*],0
	{
		@exhaustDamage = True
		@minThrust = 100
		@maxThrust = 100
		@heatProduction = 100
		@atmosphereCurve
		{
			@key,0 = 0 230
			@key,1 = 1 200
		}
	}
	@MODULE[ModuleEngines*],0
	{
		@exhaustDamage = True
		@minThrust = 5
		@maxThrust = 5
		@heatProduction = 10
		@atmosphereCurve
		{
			@key,0 = 0 230
			@key,1 = 1 200
		}
	}
	!RESOURCE[SolidFuel]
	{
	}
	MODULE
	{
		name = ModuleFuelTanks
		type = HTPB
		volume = 150.85
		basemass = -1
	}
}